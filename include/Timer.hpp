//!
//! @file				Timer.hpp
//! @author				Geoffrey Hunter <gbmhunter@gmail.com> (www.mbedded.ninja)
//! @created			2014-09-05
//! @last-modified		2014-09-05
//! @brief 				Timer object.
//! @details
//!					

#ifndef __cplusplus
	#error Please build with C++ compiler
#endif

//===============================================================================================//
//======================================== HEADER GUARD =========================================//
//===============================================================================================//

#ifndef OSAL_CPP_TIMER_H
#define OSAL_CPP_TIMER_H

//===============================================================================================//
//==================================== FORWARD DECLARATION ======================================//
//===============================================================================================//

namespace MbeddedNinja
{
	namespace OsalNs
	{
		class Timer;
	}
}

//===============================================================================================//
//========================================== INCLUDES ===========================================//
//===============================================================================================//

// System headers
#include <cstdint>		// int8_t, int32_t e.t.c

// User libraries
#include "MAssertCpp/api/MAssertApi.hpp"

// User headers
#include "Osal.hpp"

//===============================================================================================//
//======================================== NAMESPACE ============================================//
//===============================================================================================//

namespace MbeddedNinja
{
	namespace OsalNs
	{
		
		//! @brief
		//! @details
		//! @note
		class Timer
		{
			
		public:

			//======================================================================================//
			//==================================== PUBLIC METHODS ==================================//
			//======================================================================================//

			static void StaticInit(Osal * osal)
			{
				// Make sure OSAL is not null
				M_ASSERT(osal);

				Timer::osal = osal;
			}

			//! @brief		Binary semaphore constructor.
			//! @details	Protected to enforce inheritance.
			Timer(uint32_t timeoutInMs)
			{
				if(!Timer::osal)
					M_ASSERT_FAIL("%s", "Please call Timer::StaticInit() before creating any Timer object.");
				this->timeoutInMs = timeoutInMs;
			};

			void Start()
			{
				// Get the current time from the OSAL
				// and save as the current start time
				this->startTimeInMs = Timer::osal->GetTimeMs();
			}

			bool IsExpired()
			{
				if(Timer::osal->GetTimeMs() >= this->startTimeInMs + this->timeoutInMs)
					return true;
				else
					return false;

			}

			//======================================================================================//
			//================================= PUBLIC VARIABLES ===================================//
			//======================================================================================//

			// none

			private:

				//======================================================================================//
				//=================================== PRIVATE METHODS ==================================//
				//======================================================================================//

				// none

				//======================================================================================//
				//================================== PRIVATE VARIABLES =================================//
				//======================================================================================//

				static Osal * osal;

				uint32_t startTimeInMs;
				uint32_t timeoutInMs;

			protected:
	
				//======================================================================================//
				//=================================== PROTECTED METHODS ================================//
				//======================================================================================//
				
				

				//======================================================================================//
				//================================== PROTECTED VARIABLES ===============================//
				//======================================================================================//

			
		}; // class timer


	} // namespace OsalNs
} // namespace MbeddedNinja

#endif	// #ifndef OSAL_CPP_TIMER_H

// EOF
